{"version":3,"sources":["Constants.js","classes/Canvas.js","classes/CanvasList.js","utilities/default.js","App.jsx","index.js"],"names":["WHITE_COLOUR","TYPES","WHITE_PIXEL","red","green","blue","alpha","BLACK_PIXEL","Canvas","context","width","height","reference","updateDisplay","parsePixelsToData","putImageData","imageData","copyProperties","prevProperties","properties","recurseProperties","obj","retval","i","parseReferenceToPixels","prevPixels","prevPixelsLength","length","tempPixels","push","parseDataToPixels","dataLength","data","pixelsLength","pixels","j","TYPE_COUNT","Math","max","min","this","brightnessLevel","blurLevel","checkersSpacing","isInverted","isFlipped","horizontal","vertical","addedBorders","T","B","L","R","mirror","borderLength","cropped","splitX","splitY","sectionX","sectionY","duplicated","grayscaled","getImageData","next","CanvasList","inputImage","canvas","recent","makeNewRecent","setNewRecent","newRecent","canUndo","canReset","grayscale","gray","checkers","pixel","skip","checkersSpace","floor","lines","intensity","direction","simpleDirection","toUpperCase","intensityCounter","brightness","newBrightnessLevel","level","contrast","increment","k","currColour","invert","flip","tempPixel","cropTopLeft","widthMidpoint","heightMidpoint","remainingWidth","remainingHeight","currPixel","mapX","mapY","l","cleanBorders","crop","sectionPixels","duplicate","addBorders","borders","addToBorder","currBorder","remaining","external","blur","levelX","levelY","sum","count","m","average","reset","original","undo","getContext","originalContext","drawImage","setPreviousInput","e","preventDefault","getValidNumber","str","isNaN","subtring","number","parseInt","substring","makeNaturalNumber","value","makeWholeNumber","App","useState","canvasObj","setCanvasObj","imageLoaded","setImageLoaded","setCanUndo","setCanReset","invertChecked","setInvertChecked","hFlipChecked","setHFlipChecked","vFlipChecked","setVFlipChecked","imageIndex","commandPressed","setCommandPressed","controlPressed","setControlPressed","brightnessChanged","setBrightnessChanged","checkersChanged","setCheckersChanged","cropChanged","setCropChanged","duplicateChanged","setDuplicateChanged","setBrightnessLevel","consistentUpdate","setConsistentUpdate","tBorderChecked","setTBorderChecked","bBorderChecked","setBBorderChecked","lBorderChecked","setLBorderChecked","rBorderChecked","setRBorderChecked","grayScaled","setGrayScaled","useRef","cropSplitX","cropSplitY","cropSectionX","cropSectionY","duplicateSplitX","duplicateSplitY","duplicateSectionX","duplicateSectionY","tMirror","bMirror","lMirror","rMirror","images","useMemo","Image","src","useEffect","current","updateAbilities","updateElements","checked","download","link","element","document","createElement","href","toDataURL","click","changeBrightness","changeBorder","setTrue","changeMirror","border","setAllBorders","bool","addCheckers","parsedInput","checkAllCrop","checkAllDuplicate","window","onkeydown","keyPressed","key","onkeyup","id","onClick","className","type","onChange","oppositeUpdate","placeholder","onPaste","onDrop","ref","onKeyDown","code","target","makeInteger","readOnly","defaultValue","alt","newBlurLevel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5fe22573.chunk.js","sourcesContent":["const BLACK_COLOUR = 0;\nconst WHITE_COLOUR = 255;\nconst TYPES = ['red', 'green', 'blue', 'alpha'];\nconst TYPE_COUNT = 4;\nconst WHITE_PIXEL = {\n    red: WHITE_COLOUR,\n    green: WHITE_COLOUR,\n    blue: WHITE_COLOUR,\n    alpha: WHITE_COLOUR\n}\nconst BLACK_PIXEL = {\n    red: BLACK_COLOUR,\n    green: BLACK_COLOUR,\n    blue: BLACK_COLOUR,\n    alpha: WHITE_COLOUR\n}\nconst RED_PIXEL = {\n    red: WHITE_COLOUR,\n    green: BLACK_COLOUR,\n    blue: BLACK_COLOUR,\n    alpha: WHITE_COLOUR\n}\nconst BLUE_PIXEL = {\n    red: BLACK_COLOUR,\n    green: BLACK_COLOUR,\n    blue: WHITE_COLOUR,\n    alpha: WHITE_COLOUR\n}\n\nexport { BLACK_COLOUR, WHITE_COLOUR, TYPES, TYPE_COUNT, WHITE_PIXEL, BLACK_PIXEL, BLUE_PIXEL, RED_PIXEL }","import { BLACK_COLOUR, WHITE_COLOUR, TYPES, TYPE_COUNT } from '../Constants.js';\n\nexport default class Canvas {\n    imageData;\n    pixels;\n    next;\n    properties;\n\n    constructor(context, width, height, reference) {\n        this.properties = {\n            brightnessLevel: '',\n            blurLevel: 1,\n            checkersSpacing: '',\n            isInverted: false,\n            isFlipped: {\n                horizontal: false,\n                vertical: false\n            },\n            addedBorders: {\n                T: false,\n                B: false,\n                L: false,\n                R: false\n            },\n            mirror: {\n                T: false,\n                B: false,\n                L: false,\n                R: false\n            },\n            borderLength: '',\n            cropped: {\n                splitX: '',\n                splitY: '',\n                sectionX: '',\n                sectionY: ''\n            },\n            duplicated: {\n                splitX: '',\n                splitY: '',\n                sectionX: '',\n                sectionY: ''\n            },\n            grayscaled: false\n        }\n        if (reference) {\n            this.copyProperties(reference.properties);\n        }\n        this.imageData = context.getImageData(0, 0, width, height);\n        this.pixels = reference ? this.parseReferenceToPixels(reference.pixels) : this.parseDataToPixels();\n        this.next = null;\n    }\n\n    updateDisplay = (context) => {\n        this.parsePixelsToData();\n        context.putImageData(this.imageData, 0, 0);\n    }\n\n    copyProperties = prevProperties => {\n        this.properties = this.recurseProperties(prevProperties);\n    }\n\n    recurseProperties = obj => {\n        let retval = {};\n        for (let i in obj) {\n            typeof (obj[i]) === 'object' ? retval[i] = this.recurseProperties(obj[i]) : retval[i] = obj[i];\n        }\n        return retval;\n    }\n\n    parseReferenceToPixels = prevPixels => {\n        const prevPixelsLength = prevPixels.length;\n        let tempPixels = [];\n\n        for (let i = 0; i < prevPixelsLength; ++i) {\n            tempPixels.push({\n                red: prevPixels[i].red,\n                green: prevPixels[i].green,\n                blue: prevPixels[i].blue,\n                alpha: WHITE_COLOUR\n            });\n        }\n\n        return tempPixels;\n    }\n\n    parseDataToPixels = () => {\n        const dataLength = this.imageData.data.length;\n        let tempPixels = [];\n\n        for (let i = 0; i < dataLength; i += TYPE_COUNT) {\n            tempPixels.push({\n                red: this.imageData.data[i],\n                green: this.imageData.data[i + 1],\n                blue: this.imageData.data[i + 2],\n                alpha: this.imageData.data[i + 3],\n            });\n        }\n\n        return tempPixels;\n    }\n\n    parsePixelsToData = () => {\n        const pixelsLength = this.pixels.length;\n        for (let i = 0; i < pixelsLength; ++i) {\n            for (let j = 0; j < TYPE_COUNT - 1; ++j) {\n                this.imageData.data[i * TYPE_COUNT + j] = Math.max(Math.min(this.pixels[i][TYPES[j]], WHITE_COLOUR), BLACK_COLOUR);\n            }\n            this.imageData.data[(i + 1) * TYPE_COUNT] = WHITE_COLOUR;\n        }\n    }\n}","import { WHITE_COLOUR, TYPES, TYPE_COUNT, WHITE_PIXEL } from '../Constants.js';\nimport Canvas from './Canvas.js';\n\nexport default class CanvasList {\n    width;\n    height;\n    context;\n    originalContext;\n    original;\n    recent;\n    canUndo;\n    canReset;\n\n    constructor(inputImage, canvas) {\n        this.width = inputImage.width;\n        this.height = inputImage.height;\n        this.context = canvas.getContext('2d');\n        this.originalContext = canvas.getContext('2d');\n        this.context.drawImage(inputImage, 0, 0);\n        this.original = new Canvas(this.context, this.width, this.height);\n        this.recent = this.original;\n        this.canUndo = false;\n        this.canReset = false;\n        this.updateDisplay();\n    }\n\n    updateDisplay = () => {\n        this.recent.updateDisplay(this.context);\n    }\n\n    makeNewRecent = reference => {\n        return new Canvas(this.context, this.width, this.height, reference);\n    }\n\n    setNewRecent = newRecent => {\n        newRecent.next = this.recent;\n        this.recent = newRecent;\n        this.canUndo = true;\n        this.canReset = true;\n    }\n\n    grayscale = () => {\n        const pixelsLength = this.width * this.height;\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.grayscaled = true;\n        \n        for (let i = 0; i < pixelsLength; ++i) {\n            const gray = 0.299 * newRecent.pixels[i].red + 0.587 * newRecent.pixels[i].green + 0.114 * newRecent.pixels[i].blue;\n            newRecent.pixels[i].red = gray;\n            newRecent.pixels[i].green = gray;\n            newRecent.pixels[i].blue = gray;\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    checkers = (pixel, skip) => {\n        if (skip < 1) {\n            return;\n        }\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.checkersSpace = skip;\n\n        for (let i = 0; i < this.height; i += skip) {\n            for (let j = i % 2 || skip / 2 > this.width - 1 ? 0 : Math.floor(skip / 2); j < this.width; j += skip) {\n                newRecent.pixels[i * this.width + j] = pixel;\n            }\n        }\n\n        this.setNewRecent(newRecent);\n    }\n\n    lines = (pixel, intensity, skip, direction) => {\n        if (skip < 1 || direction.length === 0) {\n            return;\n        }\n\n        const simpleDirection = direction[0].toUpperCase();\n        if (!(simpleDirection === 'V' || simpleDirection === 'U' || simpleDirection === 'D' || simpleDirection === 'H' || simpleDirection === 'L' || simpleDirection === 'R')) {\n            return;\n        }\n\n        const newRecent = this.makeNewRecent(this.recent);\n        let intensityCounter = intensity;\n\n        if (simpleDirection === 'V' || simpleDirection === 'U' || simpleDirection === 'D') {\n            for (let i = 0; i < this.width; i += intensityCounter === 0 ? skip : 1) {\n                for (let j = 0; j < this.height; ++j) {\n                    newRecent.pixels[j * this.width + i] = pixel;\n                }\n\n                intensityCounter === 0 ? intensityCounter = intensity : --intensityCounter;\n            }\n        } else {\n            for (let i = 0; i < this.height; i += intensityCounter === 0 ? skip : 1) {\n                for (let j = 0; j < this.width; ++j) {\n                    newRecent.pixels[i * this.width + j] = pixel;\n                }\n\n                intensityCounter === 0 ? intensityCounter = intensity : --intensityCounter;\n            }\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    brightness = (newBrightnessLevel) => {\n        const level = newBrightnessLevel - this.recent.properties.brightnessLevel;\n        if (level > 0) {\n            this.contrast(20, level, newBrightnessLevel);\n        } else if (level < 0) {\n            this.contrast(-20, - level, newBrightnessLevel);\n        }\n    }\n\n    contrast = (increment, level, newBrightnessLevel) => {\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.brightnessLevel = newBrightnessLevel;\n\n        const pixelsLength = newRecent.pixels.length;\n        for (let i = 0; i < pixelsLength; ++i) {\n            for (let j = 0; j < TYPE_COUNT - 1; ++j) {\n                for (let k = 0; k < level; ++k) {\n                    const currColour = newRecent.pixels[i][TYPES[j]];\n                    // newRecent.pixels[i][TYPES[j]] = currColour + increment > BLACK_COLOUR && currColour + increment < WHITE_COLOUR ? currColour + increment : limit;\n                    newRecent.pixels[i][TYPES[j]] = currColour + increment;\n                }\n            }\n        }\n\n        this.setNewRecent(newRecent);\n    }\n\n    invert = () => {\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.isInverted = !newRecent.properties.isInverted;\n        const pixelsLength = this.height * this.width;\n        for (let i = 0; i < pixelsLength; ++i) {\n            for (let j = 0; j < TYPE_COUNT - 1; ++j) {\n                if (!newRecent.pixels[i]) {\n                    i = pixelsLength;\n                }\n                newRecent.pixels[i][TYPES[j]] = 255 - newRecent.pixels[i][TYPES[j]];\n            }\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    flip = (direction) => {\n        if (direction.length === 0) {\n            return;\n        }\n\n        const simpleDirection = direction[0].toUpperCase();\n        if (!(simpleDirection === 'H' || simpleDirection === 'X' || simpleDirection === 'V' || simpleDirection === 'Y')) {\n            return;\n        }\n\n        const newRecent = this.makeNewRecent(this.recent);\n        if (simpleDirection === 'H' || simpleDirection === 'X') {\n            newRecent.properties.isFlipped.horizontal = !newRecent.properties.isFlipped.horizontal;\n            for (let i = 0; i < Math.floor(this.width / 2); ++i) {\n                for (let j = 0; j < this.height; ++j) {\n                    const tempPixel = newRecent.pixels[j * this.width + i];\n                    newRecent.pixels[j * this.width + i] = newRecent.pixels[j * this.width + this.width - 1 - i];\n                    newRecent.pixels[j * this.width + this.width - 1 - i] = tempPixel;\n                }\n            }\n        } else {\n            newRecent.properties.isFlipped.vertical = !newRecent.properties.isFlipped.vertical;\n            for (let i = 0; i < Math.floor(this.height / 2); ++i) {\n                for (let j = 0; j < this.width; ++j) {\n                    const tempPixel = newRecent.pixels[i * this.width + j];\n                    newRecent.pixels[i * this.width + j] = newRecent.pixels[(this.height - 1 - i) * this.width + j];\n                    newRecent.pixels[(this.height - 1 - i) * this.width + j] = tempPixel;\n                }\n            }\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    cropTopLeft = () => {\n        const widthMidpoint = Math.floor(this.width / 2);\n        const heightMidpoint = Math.floor(this.height / 2);\n        const remainingWidth = this.width % widthMidpoint;\n        const remainingHeight = this.height % heightMidpoint;\n\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.cropped.splitX = 2;\n        newRecent.properties.cropped.splitY = 2;\n        newRecent.properties.cropped.sectionX = 0;\n        newRecent.properties.cropped.sectionY = 0;\n        for (let i = heightMidpoint - 1; i >= 0; --i) {\n            for (let j = widthMidpoint - 1; j >= 0; --j) {\n                const currPixel = newRecent.pixels[i * this.width + j];\n                const mapX = this.width - 1 - 2 * (widthMidpoint - 1 - j);\n                const mapY = this.height - 1 - 2 * (heightMidpoint - 1 - i);\n\n                for (let k = 0; k < 2; ++k) {\n                    for (let l = 0; l < 2; ++l) {\n                        newRecent.pixels[(mapY - k) * this.width + mapX - l] = currPixel;\n                    }\n                }\n            }\n        }\n\n        if (remainingWidth !== 0) {\n            this.cleanBorders(remainingWidth, 'L', WHITE_PIXEL);\n        }\n\n        if (remainingHeight !== 0) {\n            this.cleanBorders(remainingHeight, 'T', WHITE_PIXEL);\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    crop = (splitX, splitY, sectionX, sectionY) => {\n        if (splitX < 1 || splitY < 1 || sectionX >= splitX || sectionY >= splitY) {\n            return;\n        }\n\n        if (splitX === 2 && splitY === 2 && sectionX === 0 && sectionY === 0) {\n            this.cropTopLeft();\n            return;\n        }\n\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.cropped.splitX = splitX;\n        newRecent.properties.cropped.splitY = splitY;\n        newRecent.properties.cropped.sectionX = sectionX;\n        newRecent.properties.cropped.sectionY = sectionY;\n        const widthMidpoint = Math.floor(this.width / splitX);\n        const heightMidpoint = Math.floor(this.height / splitY);\n        const remainingWidth = this.width % splitX;\n        const remainingHeight = this.height % splitY;\n\n        let sectionPixels = [];\n        for (let i = sectionY * heightMidpoint; i < (sectionY + 1) * heightMidpoint; ++i) {\n            for (let j = sectionX * widthMidpoint; j < (sectionX + 1) * widthMidpoint; ++j) {\n                sectionPixels.push(newRecent.pixels[i * this.width + j]);\n            }\n        }\n\n        for (let i = 0; i < heightMidpoint; ++i) {\n            for (let j = 0; j < widthMidpoint; ++j) {\n                const currPixel = sectionPixels[i * widthMidpoint + j];\n\n                for (let k = 0; k < splitY; ++k) {\n                    for (let l = 0; l < splitX; ++l) {\n                        newRecent.pixels[(k + i * splitY) * this.width + l + j * splitX] = currPixel;\n                    }\n                }\n            }\n        }\n\n        if (remainingWidth !== 0) {\n            this.cleanBorders(remainingWidth, 'R', WHITE_PIXEL);\n        }\n\n        if (remainingHeight !== 0) {\n            this.cleanBorders(remainingHeight, 'B', WHITE_PIXEL);\n        }\n        this.setNewRecent(newRecent);\n    }\n\n\n    duplicate = (splitX, splitY, sectionX, sectionY) => {\n        if (splitX < 1 || splitY < 1 || sectionX >= splitX || sectionY >= splitY) {\n            return;\n        }\n\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.duplicated.splitX = splitX;\n        newRecent.properties.duplicated.splitY = splitY;\n        newRecent.properties.duplicated.sectionX = sectionX;\n        newRecent.properties.duplicated.sectionY = sectionY;\n        const widthMidpoint = Math.floor(this.width / splitX);\n        const heightMidpoint = Math.floor(this.height / splitY);\n        const remainingWidth = this.width % splitX;\n        const remainingHeight = this.height % splitY;\n\n        for (let i = 0; i < heightMidpoint; ++i) {\n            for (let j = 0; j < widthMidpoint; ++j) {\n                const currPixel = newRecent.pixels[(i + sectionY * heightMidpoint) * this.width + j + sectionX * widthMidpoint];\n\n                for (let k = 0; k < this.height - remainingHeight; k += heightMidpoint) {\n                    for (let l = 0; l < this.width - remainingWidth; l += widthMidpoint) {\n                        if (k !== sectionY * heightMidpoint || l !== sectionX * widthMidpoint) {\n                            newRecent.pixels[(i + k) * this.width + j + l] = currPixel;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (remainingWidth !== 0) {\n            this.cleanBorders(remainingWidth, 'R', WHITE_PIXEL);\n        }\n\n        if (remainingHeight !== 0) {\n            this.cleanBorders(remainingHeight, 'B', WHITE_PIXEL);\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    addBorders = (length, pixel, borders) => {\n        if (length < 1 || borders.length === 0) {\n            return;\n        }\n\n        let addToBorder = {\n            'T': false,\n            'B': false,\n            'L': false,\n            'R': false\n        }\n\n        for (let i = 0; i < borders.length; ++i) {\n            const currBorder = borders[i].toUpperCase();\n            if (currBorder === 'A') {\n                for (let j in addToBorder) {\n                    addToBorder[j] = true;\n                }\n                break;\n            }\n\n            if (currBorder in addToBorder) {\n                addToBorder[currBorder] = true;\n            }\n        }\n\n        for (let i in addToBorder) {\n            if (addToBorder[i]) {\n                this.cleanBorders(length, i, pixel, true);\n            }\n        }\n    }\n\n    cleanBorders = (remaining, direction, pixel, external) => {\n        if (direction.length === 0) {\n            return;\n        }\n\n        const simpleDirection = direction[0].toUpperCase();\n        if (!(simpleDirection === 'T' || simpleDirection === 'B' || simpleDirection === 'L' || simpleDirection === 'R')) {\n            return;\n        }\n\n        const newRecent = this.makeNewRecent(this.recent);\n        if (external) {\n            newRecent.properties.addedBorders[direction] = true;\n            newRecent.properties.borderLength = remaining;\n        }\n\n        switch (simpleDirection) {\n            case 'T':\n                for (let i = 0; i < remaining; ++i) {\n                    for (let j = 0; j < this.width; ++j) {\n                        newRecent.pixels[i * this.width + j] = pixel;\n                    }\n                }\n                break;\n            case 'B':\n                for (let i = this.height - remaining; i < this.height; ++i) {\n                    for (let j = 0; j < this.width; ++j) {\n                        newRecent.pixels[i * this.width + j] = pixel;\n                    }\n                }\n                break;\n            case 'L':\n                for (let i = 0; i < this.height; ++i) {\n                    for (let j = 0; j < remaining; ++j) {\n                        newRecent.pixels[i * this.width + j] = pixel;\n                    }\n                }\n                break;\n            default:\n                for (let i = 0; i < this.height; ++i) {\n                    for (let j = this.width - remaining; j < this.width; ++j) {\n                        newRecent.pixels[i * this.width + j] = pixel;\n                    }\n                }\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    mirror = direction => {\n        const simpleDirection = direction[0].toUpperCase();\n        if (!(simpleDirection === 'T' || simpleDirection === 'B' || simpleDirection === 'L' || simpleDirection === 'R')) {\n            return;\n        }\n\n        const newRecent = this.makeNewRecent(this.recent);\n        newRecent.properties.mirror[direction] = true;\n        switch (simpleDirection) {\n            case 'T':\n                for (let i = 0; i < Math.floor(this.height / 2); ++i) {\n                    for (let j = 0; j < this.width; ++j) {\n                        newRecent.pixels[(this.height - 1 - i) * this.width + j] = newRecent.pixels[i * this.width + j];\n                    }\n                }\n                break;\n            case 'B':\n                for (let i = 0; i < Math.floor(this.height / 2); ++i) {\n                    for (let j = 0; j < this.width; ++j) {\n                        newRecent.pixels[i * this.width + j] = newRecent.pixels[(this.height - 1 - i) * this.width + j];\n                    }\n                }\n                break;\n            case 'L':\n                for (let i = 0; i < Math.floor(this.width / 2); ++i) {\n                    for (let j = 0; j < this.height; ++j) {\n                        newRecent.pixels[j * this.width + this.width - 1 - i] = newRecent.pixels[j * this.width + i];\n                    }\n                }\n                break;\n            default:\n                for (let i = 0; i < Math.floor(this.width / 2); ++i) {\n                    for (let j = 0; j < this.height; ++j) {\n                        newRecent.pixels[j * this.width + i] = newRecent.pixels[j * this.width + this.width - 1 - i];\n                    }\n                }\n        }\n        this.setNewRecent(newRecent);\n    }\n\n    blur = (levelX, levelY) => {\n        if (levelX < 1 || levelY < 1) {\n            return;\n        }\n\n        const newRecent = this.makeNewRecent(this.recent);\n        ++newRecent.properties.blurLevel;\n        for (let i = 0; i < this.height; i += levelY) {\n            for (let j = 0; j < this.width; j += levelX) {\n                let sum = {\n                    red: 0,\n                    green: 0,\n                    blue: 0\n                };\n                let count = 0;\n\n                for (let k = i; k < i + levelY; ++k) {\n                    for (let l = j; l < j + levelX; ++l) {\n                        if (k >= 0 && k < this.height && l >= 0 && l < this.width) {\n                            ++count;\n                            for (let m = 0; m < TYPE_COUNT - 1; ++m) {\n                                sum[TYPES[m]] += newRecent.pixels[k * this.width + l][TYPES[m]];\n                            }\n                        }\n                    }\n                }\n\n                const average = {\n                    red: sum.red / count,\n                    green: sum.green / count,\n                    blue: sum.blue / count,\n                    alpha: WHITE_COLOUR\n                }\n\n                for (let k = i; k < i + levelY; ++k) {\n                    for (let l = j; l < j + levelX; ++l) {\n                        if (k >= 0 && k < this.height && l >= 0 && l < this.width) {\n                            newRecent.pixels[k * this.width + l] = average;\n                        }\n                    }\n                }\n            }\n        }\n\n        this.setNewRecent(newRecent);\n    }\n\n    reset = () => {\n        if (this.canReset) {\n            const newRecent = this.makeNewRecent(this.original);\n            newRecent.next = this.recent;\n            this.recent = newRecent;\n            this.canReset = false;\n            this.updateDisplay();\n        }\n    }\n\n    undo = () => {\n        if (this.canUndo) {\n            this.recent = this.recent.next;\n            this.canUndo = this.recent.next !== null;\n            this.canReset = this.canUndo;\n        }\n    }\n}","const setPreviousInput = e => {\n    e.preventDefault();\n}\n\nconst getValidNumber = (str, min, max) => {\n    if (str.length === 0 || str === \"-\" || (isNaN(str) && isNaN(str.subtring(1) && str.length > 1)) || (isNaN(str[0]) && str[0] !== \"-\")) {\n        return null;\n    }\n\n    const number = str[0] === \"-\" ? - parseInt(str.substring(1)) : parseInt(str);\n    if (number <= max && number >= min) {\n        return number;\n    }\n    return null;\n}\n\n\nconst makeInteger = value => {\n    for (let i = 0; i < value.length; ++i) {\n        if (!((value[i] >= '0' && value[i] <= '9') || value[i] === '-') || (value[i] === '-' && i !== 0) || (value[i] === '0' && value.length !== 1 && (i === 0 || (i === 1 && value[0] === '-')))) {\n            return value.substring(0, i) + value.substring(i + 1);\n        }\n    }\n\n    return value;\n}\n\nconst makeNaturalNumber = value => {\n    for (let i = 0; i < value.length; ++i) {\n        if (!(value[i] >= '0' && value[i] <= '9') || (value[i] === '0' && i === 0)) {\n            return value.substring(0, i) + value.substring(i + 1);\n        }\n    }\n\n    return value;\n}\n\nconst makeWholeNumber = value => {\n    for (let i = 0; i < value.length; ++i) {\n        if (!(value[i] >= '0' && value[i] <= '9') || (value[i] === '0' && value.length !== 1 && i === 0)) {\n            return value.substring(0, i) + value.substring(i + 1);\n        }\n    }\n\n    return value;\n}\n\nexport { setPreviousInput, getValidNumber, makeInteger, makeWholeNumber, makeNaturalNumber };","import './App.scss';\n// import { BLACK_COLOUR, WHITE_COLOUR, TYPES, TYPE_COUNT, WHITE_PIXEL, BLACK_PIXEL } from './Constants.js';\nimport CanvasList from './classes/CanvasList';\n// import Blur from './components/Blur/Blur'\nimport { useState, useRef, useEffect, useMemo } from 'react/cjs/react.development';\nimport { BLACK_PIXEL } from './Constants';\nimport { setPreviousInput, getValidNumber, makeInteger, makeWholeNumber, makeNaturalNumber } from './utilities/default';\n// import { RED_PIXEL } from './Constants';\n\nfunction App() {\n  let [canvasObj, setCanvasObj] = useState(null);\n  let [imageLoaded, setImageLoaded] = useState(false);\n  let [canUndo, setCanUndo] = useState(false);\n  let [canReset, setCanReset] = useState(false);\n  let [invertChecked, setInvertChecked] = useState(false);\n  let [hFlipChecked, setHFlipChecked] = useState(false);\n  let [vFlipChecked, setVFlipChecked] = useState(false);\n  let [imageIndex] = useState(0);\n  let [commandPressed, setCommandPressed] = useState(false);\n  let [controlPressed, setControlPressed] = useState(false);\n  let [brightnessChanged, setBrightnessChanged] = useState(true);\n  let [checkersChanged, setCheckersChanged] = useState(true);\n  let [cropChanged, setCropChanged] = useState(true);\n  let [duplicateChanged, setDuplicateChanged] = useState(true);\n  let [brightnessLevel, setBrightnessLevel] = useState(0);\n  let [consistentUpdate, setConsistentUpdate] = useState(true);\n  let [tBorderChecked, setTBorderChecked] = useState(false);\n  let [bBorderChecked, setBBorderChecked] = useState(false);\n  let [lBorderChecked, setLBorderChecked] = useState(false);\n  let [rBorderChecked, setRBorderChecked] = useState(false);\n  let [grayScaled, setGrayScaled] = useState(false);\n  // let [tMirrorChecked, setTMirrorChecked] = useState(false);\n  // let [bMirrorChecked, setBMirrorChecked] = useState(false);\n  // let [lMirrorChecked, setLMirrorChecked] = useState(false);\n  // let [rMirrorChecked, setRMirrorChecked] = useState(false);\n  let borderLength = useRef(null);\n  let checkersSpacing = useRef(null);\n  let canvas = useRef(null);\n  let brightness = useRef(null);\n  let cropSplitX = useRef(null);\n  let cropSplitY = useRef(null);\n  let cropSectionX = useRef(null);\n  let cropSectionY = useRef(null);\n  let duplicateSplitX = useRef(null);\n  let duplicateSplitY = useRef(null);\n  let duplicateSectionX = useRef(null);\n  let duplicateSectionY = useRef(null);\n  let blurLevel = useRef(null);\n  let tMirror = useRef(null);\n  let bMirror = useRef(null);\n  let lMirror = useRef(null);\n  let rMirror = useRef(null);\n\n  const images = useMemo(() => [], []);\n  images[imageIndex] = new Image();\n  images[imageIndex].src = 'assets/images/landscape.jpg'\n\n  useEffect(() => {\n    if (!imageLoaded) {\n      canvas.current.width = parseInt(images[imageIndex].width);\n      canvas.current.height = parseInt(images[imageIndex].height);\n      setCanvasObj(new CanvasList(images[imageIndex], canvas.current));\n      setImageLoaded(true);\n    }\n  }, [images, imageLoaded, imageIndex]);\n\n  const updateAbilities = () => {\n    if (consistentUpdate) {\n      canvasObj.updateDisplay();\n    }\n    setCanUndo(canvasObj.canUndo);\n    setCanReset(canvasObj.canReset);\n  }\n\n  const updateElements = () => {\n    updateAbilities();\n    brightness.current.value = canvasObj.recent.properties.brightnessLevel;\n    borderLength.current.value = canvasObj.recent.properties.borderLength;\n    checkersSpacing.current.value = canvasObj.recent.properties.checkersSpacing;\n    cropSplitX.current.value = canvasObj.recent.properties.cropped.splitX;\n    cropSplitY.current.value = canvasObj.recent.properties.cropped.splitY;\n    cropSectionX.current.value = canvasObj.recent.properties.cropped.sectionX;\n    cropSectionY.current.value = canvasObj.recent.properties.cropped.sectionY;\n    duplicateSplitX.current.value = canvasObj.recent.properties.duplicated.splitX;\n    duplicateSplitY.current.value = canvasObj.recent.properties.duplicated.splitY;\n    duplicateSectionX.current.value = canvasObj.recent.properties.duplicated.sectionX;\n    duplicateSectionY.current.value = canvasObj.recent.properties.duplicated.sectionY;\n    blurLevel.current.value = canvasObj.recent.properties.blurLevel;\n    tMirror.current.checked = canvasObj.recent.properties.mirror.T;\n    bMirror.current.checked = canvasObj.recent.properties.mirror.B;\n    lMirror.current.checked = canvasObj.recent.properties.mirror.L;\n    rMirror.current.checked = canvasObj.recent.properties.mirror.R;\n\n    setInvertChecked(canvasObj.recent.properties.isInverted);\n    setHFlipChecked(canvasObj.recent.properties.isFlipped.horizontal);\n    setVFlipChecked(canvasObj.recent.properties.isFlipped.vertical);\n    setTBorderChecked(canvasObj.recent.properties.addedBorders.T);\n    setBBorderChecked(canvasObj.recent.properties.addedBorders.B);\n    setLBorderChecked(canvasObj.recent.properties.addedBorders.L);\n    setRBorderChecked(canvasObj.recent.properties.addedBorders.R);\n    setGrayScaled(canvasObj.recent.properties.grayscaled)\n  }\n\n  const reset = () => {\n    if (canReset) {\n      canvasObj.reset();\n      updateElements();\n    }\n  }\n\n  const undo = () => {\n    if (canUndo) {\n      canvasObj.undo();\n      updateElements();\n    }\n  }\n\n  const download = link => {\n    const element = document.createElement('a');\n    element.href = canvas.current.toDataURL()\n    element.download = link ? link : 'processed.jpg';\n    element.click();\n  }\n\n  const changeBrightness = () => {\n    const value = brightness.current.value;\n    const number = getValidNumber(value, -25, 25);\n    if (value === '') {\n      return;\n    }\n\n    if (number !== null && canvasObj.recent.properties.brightnessLevel !== number) {\n      canvasObj.brightness(number);\n      setBrightnessLevel(number);\n      updateAbilities();\n      setBrightnessChanged(true);\n    }\n  }\n\n  const changeBorder = (borders, setTrue) => {\n    const value = borderLength.current.value;\n    const number = getValidNumber(value, 1, Math.max(canvasObj.width, canvasObj.height));\n    if (value === '') {\n      return;\n    }\n\n    if (number !== null) {\n      canvasObj.addBorders(number, BLACK_PIXEL, borders);\n      updateAbilities();\n      setTrue(true);\n    }\n  }\n\n  const changeMirror = (border, setTrue) => {\n    canvasObj.mirror(border);\n    updateAbilities();\n  }\n\n  const setAllBorders = bool => {\n    setTBorderChecked(bool);\n    setBBorderChecked(bool);\n    setLBorderChecked(bool);\n    setRBorderChecked(bool);\n  }\n\n  const addCheckers = () => {\n    const value = checkersSpacing.current.value;\n    const number = getValidNumber(value, 1, Math.max(canvasObj.width, canvasObj.height));\n    if (value === '') {\n      return;\n    }\n\n    if (number !== null) {\n      canvasObj.checkers(BLACK_PIXEL, number);\n      updateAbilities();\n      setCheckersChanged(true);\n    }\n  }\n\n  const crop = () => {\n    if (cropChanged) {\n      return;\n    }\n\n    const parsedInput = {\n      splitX: parseInt(cropSplitX.current.value),\n      splitY: parseInt(cropSplitY.current.value),\n      sectionX: parseInt(cropSectionX.current.value),\n      sectionY: parseInt(cropSectionY.current.value),\n    }\n    canvasObj.crop(parsedInput.splitX, parsedInput.splitY, parsedInput.sectionX, parsedInput.sectionY);\n    updateAbilities();\n    setCropChanged(true);\n  }\n\n  const checkAllCrop = () => {\n    const parsedInput = {\n      splitX: getValidNumber(cropSplitX.current.value, 1, 20),\n      splitY: getValidNumber(cropSplitY.current.value, 1, 20),\n      sectionX: 0,\n      sectionY: 0\n    }\n\n    parsedInput.sectionX = getValidNumber(cropSectionX.current.value, 0, parsedInput.splitX - 1);\n    parsedInput.sectionY = getValidNumber(cropSectionY.current.value, 0, parsedInput.splitY - 1);\n\n    return parsedInput.splitX === null || parsedInput.splitY === null || parsedInput.sectionX === null || parsedInput.sectionY === null;\n  }\n\n  const duplicate = () => {\n    if (duplicateChanged) {\n      return;\n    }\n\n    const parsedInput = {\n      splitX: parseInt(duplicateSplitX.current.value),\n      splitY: parseInt(duplicateSplitY.current.value),\n      sectionX: parseInt(duplicateSectionX.current.value),\n      sectionY: parseInt(duplicateSectionY.current.value),\n    }\n    canvasObj.duplicate(parsedInput.splitX, parsedInput.splitY, parsedInput.sectionX, parsedInput.sectionY);\n    updateAbilities();\n    setCropChanged(true);\n  }\n\n  const checkAllDuplicate = () => {\n    const parsedInput = {\n      splitX: getValidNumber(duplicateSplitX.current.value, 1, 20),\n      splitY: getValidNumber(duplicateSplitY.current.value, 1, 20),\n      sectionX: 0,\n      sectionY: 0\n    }\n\n    parsedInput.sectionX = getValidNumber(duplicateSectionX.current.value, 0, parsedInput.splitX - 1);\n    parsedInput.sectionY = getValidNumber(duplicateSectionY.current.value, 0, parsedInput.splitY - 1);\n\n    return parsedInput.splitX === null || parsedInput.splitY === null || parsedInput.sectionX === null || parsedInput.sectionY === null;\n  }\n\n  window.onkeydown = e => {\n    if (!canvasObj) {\n      return;\n    }\n\n    const keyPressed = e.key;\n    if (keyPressed === 'Meta') {\n      setCommandPressed(true);\n    } else if (keyPressed === 'Control') {\n      setControlPressed(true);\n    } else if (controlPressed || commandPressed) {\n      if (keyPressed === 'z') {\n        undo();\n      } else if (keyPressed === 'b') {\n        reset();\n      } else if (keyPressed === 'd') {\n        download();\n      } else if (keyPressed === 'u') {\n        canvasObj.updateDisplay();\n      }\n    }\n  }\n\n  window.onkeyup = (e) => {\n    switch (e.key) {\n      case 'Meta':\n        setCommandPressed(false);\n        break;\n      case 'Control':\n        setControlPressed(false);\n        break;\n      default:\n        return;\n    }\n  }\n\n  return (\n    <div id=\"app\">\n      <div id=\"header\">\n        <button id=\"download\" onClick={() => {\n          download();\n        }}>Download</button>\n        <button id=\"update\" onClick={() => {\n          canvasObj.updateDisplay();\n        }}>Update</button>\n      </div>\n      <div id=\"menu\">\n        <button className={canReset ? 'reset active' : 'reset inactive'} onClick={() => {\n          reset();\n        }\n        }>Reset</button>\n        <button className={canUndo ? 'undo active' : 'undo inactive'} onClick={() => {\n          undo();\n        }\n        }>Undo</button>\n        {canvasObj ?\n          <div id=\"options-container\">\n            <input type=\"checkbox\" checked={consistentUpdate} onChange={() => {\n              const oppositeUpdate = !consistentUpdate;\n              if (oppositeUpdate) {\n                canvasObj.updateDisplay();\n              }\n              setConsistentUpdate(oppositeUpdate);\n            }} />\n            <div className=\"option\">\n              <div className=\"title\">\n                Brightness\n              </div>\n              <input type=\"text\" placeholder=\"Enter Value from -15 to 15\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={brightness} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  changeBrightness();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeInteger(value);\n\n                setBrightnessChanged(value === '' || parseInt(value) === brightnessLevel);\n              }} />\n              <button className={brightnessChanged ? \"submit brightness inactive\" : \"submit brightness active\"} onClick={() => {\n                changeBrightness();\n                setBrightnessChanged(brightnessLevel === canvasObj.recent.properties.brightnessLevel);\n              }}>Confirm\n              </button>\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Blur\n              </div>\n              <input type=\"text\" readOnly ref={blurLevel} defaultValue={1} />\n              <img className=\"blur-add\" src=\"assets/images/add.png\" alt=\"blur-add\" onClick={() => {\n                const newBlurLevel = parseInt(blurLevel.current.value) + 1;\n                blurLevel.current.value = newBlurLevel;\n                canvasObj.blur(newBlurLevel, newBlurLevel);\n                updateAbilities();\n              }} />\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Invert\n              </div>\n              <input type=\"checkbox\" checked={invertChecked} onChange={() => {\n                canvasObj.invert();\n                updateAbilities();\n                setInvertChecked(!invertChecked);\n              }} />\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Flip\n              </div>\n              <input type=\"checkbox\" checked={hFlipChecked} onChange={() => {\n                canvasObj.flip('H');\n                updateAbilities();\n                setHFlipChecked(!hFlipChecked);\n              }} />\n              <input type=\"checkbox\" checked={vFlipChecked} onChange={() => {\n                canvasObj.flip('V');\n                updateAbilities();\n                setVFlipChecked(!vFlipChecked);\n              }} />\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Border\n              </div>\n              <input type=\"text\" placeholder=\"Enter Thickness of Pixels\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={borderLength} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  changeBorder(['A'], setAllBorders);\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeWholeNumber(value);\n\n                setAllBorders(false);\n              }} />\n              <input type=\"radio\" checked={tBorderChecked} onChange={() => {\n                changeBorder(['T'], setTBorderChecked);\n              }\n              } />\n              <input type=\"radio\" checked={bBorderChecked} onChange={() => {\n                changeBorder(['B'], setBBorderChecked);\n              }\n              } />\n              <input type=\"radio\" checked={lBorderChecked} onChange={() => {\n                changeBorder(['L'], setLBorderChecked);\n              }\n              } />\n              <input type=\"radio\" checked={rBorderChecked} onChange={() => {\n                changeBorder(['R'], setRBorderChecked);\n              }\n              } />\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Mirror\n              </div>\n              <input type=\"radio\" ref={tMirror} onChange={() => {\n                changeMirror('T');\n              }\n              } />\n              <input type=\"radio\" ref={bMirror} onChange={() => {\n                changeMirror('B');\n              }\n              } />\n              <input type=\"radio\" ref={lMirror} onChange={() => {\n                changeMirror('L');\n              }\n              } />\n              <input type=\"radio\" ref={rMirror} onChange={() => {\n                changeMirror('R');\n              }\n              } />\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Grayscale\n              </div>\n              <input type=\"radio\" checked={grayScaled} onChange={() => {\n                if (!grayScaled) {\n                  setGrayScaled(true);\n                  canvasObj.grayscale();\n                  updateAbilities();\n                }\n              }\n              } />\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Checkers\n              </div>\n              <input type=\"text\" placeholder=\"Enter Spacing of Pixels\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={checkersSpacing} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  addCheckers();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeNaturalNumber(value);\n\n                setCheckersChanged(e.target.value === '');\n              }} />\n              <button className={checkersChanged ? \"submit checkers inactive\" : \"submit checkers active\"} onClick={() => {\n                addCheckers();\n              }}>Confirm\n              </button>\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Crop\n              </div>\n              <input type=\"text\" placeholder=\"Enter Horizontal Split\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={cropSplitX} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  crop();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeNaturalNumber(value);\n\n                setCropChanged(checkAllCrop);\n              }} />\n              <input type=\"text\" placeholder=\"Enter Vertical Split\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={cropSplitY} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  crop();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeNaturalNumber(value);\n\n                setCropChanged(checkAllCrop);\n              }} />\n              <input type=\"text\" placeholder=\"Enter Horizontal Index\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={cropSectionX} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  crop();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeWholeNumber(value);\n\n                setCropChanged(checkAllCrop);\n              }} />\n              <input type=\"text\" placeholder=\"Enter Vertical Section\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={cropSectionY} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  crop();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeWholeNumber(value);\n\n                setCropChanged(checkAllCrop);\n              }} />\n              <button className={cropChanged ? \"submit crop inactive\" : \"submit crop active\"} onClick={() => {\n                crop();\n              }}>Confirm\n              </button>\n            </div>\n            <div className=\"option\">\n              <div className=\"title\">\n                Duplicate\n              </div>\n              <input type=\"text\" placeholder=\"Enter Horizontal Split\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={duplicateSplitX} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  duplicate();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeNaturalNumber(value);\n\n                setDuplicateChanged(checkAllDuplicate);\n              }} />\n              <input type=\"text\" placeholder=\"Enter Vertical Split\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={duplicateSplitY} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  duplicate();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeNaturalNumber(value);\n\n                setDuplicateChanged(checkAllDuplicate);\n              }} />\n              <input type=\"text\" placeholder=\"Enter Horizontal Section\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={duplicateSectionX} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  duplicate();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeWholeNumber(value);\n\n                setDuplicateChanged(checkAllDuplicate);\n              }} />\n              <input type=\"text\" placeholder=\"Enter Vertical Section\" onPaste={setPreviousInput} onDrop={setPreviousInput} ref={duplicateSectionY} onKeyDown={e => {\n                if (e.code === 'Enter') {\n                  duplicate();\n                }\n              }} onChange={e => {\n                const value = e.target.value;\n                e.target.value = makeWholeNumber(value);\n\n                setDuplicateChanged(checkAllDuplicate);\n              }} />\n              <button className={duplicateChanged ? \"submit crop inactive\" : \"submit crop active\"} onClick={() => {\n                crop();\n              }}>Confirm\n              </button>\n            </div>\n          </div> : null}\n      </div>\n      <div id=\"canvas-container\">\n        <canvas id=\"canvas\" ref={canvas}></canvas>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}